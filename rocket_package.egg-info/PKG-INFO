Metadata-Version: 2.4
Name: rocket_package
Version: 0.1.0
Summary: A package for simulating rocket designs
Author-email: Toby Simonds <tamassimonds@gmail.com>
Project-URL: Homepage, https://github.com/toby-simonds/rocket_package
Project-URL: Bug Tracker, https://github.com/toby-simonds/rocket_package/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.25.1

# RocketEnv

A modular framework for rocket flight simulation based on RocketPy.

## Project Overview

This project provides an abstraction layer over RocketPy to simplify rocket building, configuration, and simulation. The code is organized into modular components, making it easy to:

- Define rocket configurations
- Manage motor definitions
- Set up atmospheric conditions
- Run flight simulations
- Analyze flight performance
- Check structural integrity
- Calculate costs and bill of materials

## Directory Structure

```
RocketEnv/
├── configs/             # Engine files and config files
├── motors/              # Motor definitions and loader
├── outputs/             # Generated plots and KML files
├──.src/                 # Source code
│   ├── analysis/        # Analysis tools
│   ├── models/          # Rocket and simulation models
│   └── utils/           # Utility functions
├── default_configs.py   # Default rocket configurations
├── example_simulation.py # Example usage script
└── README.md            # Project documentation
```

## Installation

1. Clone this repository
2. Create a virtual environment (recommended):
```bash
python -m venv myenv
source myenv/bin/activate  # On Windows: myenv\Scripts\activate
```
3. Install requirements:
```bash
pip install rocketpy numpy pandas matplotlib
```

## Quick Start

Run a simulation with default settings:

```bash
python example_simulation.py
```

Specify custom parameters:

```bash
python example_simulation.py --motor CesaroniM1670 --wind-u 10 --wind-v 5 --output my_results
```

## Configuration

Rocket configurations are defined as Python dictionaries. See `default_configs.py` for examples. Configuration parameters include:

- Rocket body dimensions and materials
- Aerodynamic components (nose cone, fins, tail)
- Parachute properties
- Launch conditions
- Payload specifications
- Environmental settings

## Motors

Motor configurations are stored in the `motors` directory. The first time you run the simulation with the `--save-motors` flag, JSON configuration files will be created for all predefined motors.

```bash
python example_simulation.py --save-motors
```

## Adding New Motors

1. Add the motor thrust curve file (*.eng) to the `configs` directory
2. Add the motor configuration to `motors/motor_loader.py` in the `motors` dictionary
3. Run the script with `--save-motors` to generate the JSON configuration file

## Customizing Simulations

Create your own simulation script:

```python
from.src.models.simulation import RocketSimulation
from default_configs import standard_config

# Initialize simulation with custom configuration
simulation = RocketSimulation(standard_config)

# Customize environment (constant 10 m/s eastward wind)
simulation.setup_environment(env_type="constant_wind", wind_u=10, wind_v=0)

# Build and run
simulation.build_rocket()
simulation.run_simulation()

# Analyze and output
results = simulation.analyze_results()
simulation.print_summary()
simulation.save_plots()

# Access specific results
apogee = results["flight"]["max_apogee"]
structural_failure = results["structural"]["overall_failure"]
print(f"Apogee: {apogee:.2f} m")
print(f"Structural failure: {structural_failure}")
```

## Features

- **Automatic motor positioning**: Motors are automatically positioned at the back of the rocket based on the rocket's geometry
- **Structural analysis**: Analyzes stress on fins and body tube to detect potential failures
- **Cost calculation**: Computes bill of materials with costs
- **Multiple environment types**: Support for fetching weather data, using cached data, or defining custom wind profiles

## License

This project is open source under the MIT License.
