# Rocket Design Task

## Design Requirements

- **Target Landing Position**: (4000.0m, 4000.0m) - land as close as possible to these coordinates

- **Wind Conditions**: 5 m/s from E direction

## You are scored off the following

#Score func code shown below:
reward = 0.0
reward_breakdown = {}

# Calculate 2D distance from target (Euclidean distance)
landing_error = math.sqrt((landing_x - target_x)**2 + (landing_y - target_y)**2)

# Set the standard deviation (sigma) based on difficulty
# Higher difficulty = smaller sigma = tighter landing requirements
# Replace the sigma and landing reward calculation with:
max_landing_error = 100.0  # meters (maximum error before reward becomes 0)
landing_reward = 1.0 - (landing_error / max_landing_error)
landing_reward = max(0, landing_reward)  # Cl
# Store info in breakdown
reward_breakdown["landing_reward"] = landing_reward
reward_breakdown["landing_x"] = landing_x
reward_breakdown["landing_y"] = landing_y
reward_breakdown["target_x"] = target_x
reward_breakdown["target_y"] = target_y
reward_breakdown["landing_error"] = landing_error
reward_breakdown["precision_requirement"] = 0
reward_breakdown["difficulty_factor"] = difficulty_factor

# Structural failure reward
structural_failure_reward = 0 if structural_failure else 1

# Cost reward (with exponential scaling to reward efficiency more)
max_cost = 1000.0  # Base cost scale
cost_factor = total_cost / max_cost
cost_reward = 1.0 - cost_factor
cost_reward = max(0, cost_reward)  # Clamp to minimum of 0

# Impact velocity reward (soft landing reward - exponential)
max_impact_velocity = 25  # m/s
impact_factor = impact_velocity / max_impact_velocity
impact_reward = 1.0 - impact_factor
impact_reward = max(0, impact_reward)

# Add rewards with weights prioritizing landing accuracy
reward = (landing_reward * 0.75 +         # Landing accuracy is most important
            cost_reward * 0.05 +            # Cost is less important
            impact_reward * 0.05 +          # Soft landing still matters
            structural_failure_reward * 0.15)  # Structural integrity is important


## Available Materials

The following materials are available for the rocket components:
aluminum, composite, fiberglass, carbon_fiber, balsa_wood, plywood, ABS_plastic

##Cost Calculation
Cost is calculated based off the cost of the motor + the weight of material * cost of material

## Available Motors

Name,Manufacturer,Radius (mm),Length (mm),Dry Mass (kg),Max Thrust (N),Avg Thrust (N),Burn Time (s),Total Impulse (Ns),Isp (s), Cost ($)
Pro75M1670,CTI,75,757,1.815,2200,1533.9,3.9,6023.6,198, 520
AeroTechK700W,AT,54,568,0.732,1029.3,658.7,3.5,2249,177.5, 180
CesaroniM1670,CTI,75,757,3.101,2200,1533.9,3.6,6023.6,198, 550
AeroTechH128W,AT,29,194,0.108,190.5,141.2,1.29,176.5,191.3, 65
CesaroniO3700,CTI,161,957,14.194,4030.3,2836.9,8.2,29930.2,177.8, 1250
CesaroniO5800,CTI,150,754,12.418,6395.5,5040.2,5.2,30382.7,222, 1100
CesaroniK160,CTI,54,404,0.7,272.2,190.2,9.7,1521.7,182.9, 130

## Design Task

Based on the requirements and available components, design a rocket that will meet the design requirements. Your design should include:

1. Motor selection (choose from the available motors list)
2. Body dimensions and material
3. Nose cone dimensions and material
4. Fin design and material
5. Parachute specifications
6. Launch rail configuration


### Notes
DRC are run on the design so you need to make sure the design is feasible.
Here are some of the checks:
Notes for the tail the top and bottom radius cannot be the same (causes error)
The material must be specified exactly as listed above
The body radius must be greater than the motor radius
Nose cone but by exactly one of the listed 
Don't include any additional python code (other than config. Putting calculation in there is ok like 32/4 but not whole functions

## Response Format

Please provide your design as a Python dictionary that can be directly used in our simulation software. Use the following format:

```python
config = {
    "motor_choice": "MOTOR_NAME",  # Choose from available motors
    "rocket_body": {
        "radius": RADIUS_IN_METERS,  # Body radius in meters (must be greater than motor Radius)
        "length": LENGTH_IN_METERS,  # Body length in meters
        "material": "MATERIAL",  # Choose from available materials
        "thickness": THICKNESS_IN_METERS,  # Wall thickness in meters
    },
    "aerodynamics": {
        "nose_cone": {
            "kind": "SHAPE",  # "conical", "ogive", "elliptical", "tangent", "von karman", "parabolic", "powerseries" or "lvhaack".
            "length": LENGTH_IN_METERS,
            "material": "MATERIAL",
        },
        "fins": {
            "number": NUMBER_OF_FINS,
            "root_chord": LENGTH_IN_METERS,
            "tip_chord": LENGTH_IN_METERS,
            "span": LENGTH_IN_METERS,
            "cant_angle": ANGLE_IN_DEGREES,
            "material": "MATERIAL",
            "thickness": THICKNESS_IN_METERS,
        },
        "tail": {
            "length": LENGTH_IN_METERS,
            "top_radius": RADIUS_IN_METERS,
            "bottom_radius": RADIUS_IN_METERS,
            "material": "MATERIAL",
        },
    },
    "parachutes": {
        "main": {
            "name": "Main",
            "cd_s": AREA,
            "trigger": "apogee",
            "sampling_rate": 105,
            "lag": 1.5,
            "noise": (0, 8.3, 0.5),
        },
        "drogue": {
            "name": "Drogue",
            "cd_s": AREA,
            "trigger": "apogee",
            "sampling_rate": 105,
            "lag": 1.5,
            "noise": (0, 8.3, 0.5),
        },
    },
    "launch": {
        "rail_length": LENGTH_IN_METERS, 
        "inclination": ANGLE_IN_DEGREES, #90 is vertical launch
        "heading": ANGLE_IN_DEGREES, # Heading in degrees 0 is up
    },
    "payload": { #point mass as position specified 
        "mass": MASS_IN_KG,
        "position": POSITION_IN_METERS,  # relative to rocket center
    },
}
```


Here's an example valid design. This is not at all indicative of what you should do just an example:

```python
config = {
    "motor_choice": "CesaroniO5800",
    "rocket_body": {
        "radius": 0.1,  # Body radius in meters
        "length": 1.2,    # Body length in meters
        "material": "fiberglass",
        "thickness": 0.01,  # Wall thickness in meters
    },
    "aerodynamics": {
        "nose_cone": {
            "kind": "ogive",
            "length": 0.3,  # Nose cone length in meters
            "material": "composite",
        },
        "fins": {
            "number": 4,
            "root_chord": 0.15,  # Fin root chord in meters
            "tip_chord": 0.075,  # Fin tip chord in meters
            "span": 0.3,         # Fin span in meters
            "cant_angle": 0.5,   # Cant angle in degrees
            "material": "carbon_fiber",
            "thickness": 0.005   # Fin thickness in meters
        },
        "tail": {
            "length": 1.2,  # Tail length in meters
            "top_radius": 0.04,  # Top radius in meters
            "bottom_radius": 0.05,  # Bottom radius in meters
            "material": "carbon_fiber",
        },
    },
    "parachutes": {
        "main": {
            "name": "Main",
            "cd_s": 0.25,  # Main parachute CD_s
            "trigger": "apogee",
            "sampling_rate": 105,
            "lag": 1.5,
            "noise": (0, 8.3, 0.5),
        },
        "drogue": {
            "name": "Drogue",
            "cd_s": 0.2,  # Drogue parachute CD_s
            "trigger": "apogee",
            "sampling_rate": 105,
            "lag": 1.5,
            "noise": (0, 8.3, 0.5),
        },
    },
    "launch": { #You can change any of these to help reach the target
        "rail_length": 1.2,  # Length of the launch rail in meters
        "inclination": 90,   # Rail inclination in degrees (vertical)
        "heading": 0,        # Launch heading in degrees (straight up)
    },
    "payload": {
        "mass": 0.5,  # Payload mass in kg
        "position": 0.6  # Payload position relative to rocket center in meters
    }
}
```
Before answering you should provide your full reasoning for the design choices you made thinking like a rocket scientist. Run sample calulations, make approximations etc to find best design

